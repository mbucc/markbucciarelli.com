<!--
kotlin: Value object with input validation
November 9, 2019
kotlin
-->
    <section style='clear: both;'>
    
      <p>The software used for this howto is Kotlin 1.3.50.</p>
    
    
      <pre><code>
    data class Hour(val n: Int) {
      init {
          require(n in 0..23) { "invalid hour $n" }
      }
    
      companion object {
          @JvmStatic
          fun parse(x : String) = Hour(x.toInt())
      }
    
    }
      </code></pre>
    
      <p>
        Hat tip to Alexis King's blog post
        <a href='https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/'>Parse,
          donâ€™t validate</a>.
      </p>
    
      <p>
        Note that in Kotlin, the <code>Int</code> type means a compiler error if your code
        tries to instantiate this class with a null value. (The type
        <code>Int?</code> would tell the compiler a null is OK.)
      </p>
    
      <h2>Other useful Java value objects having to do with time:</h2>
    
      <ul>
        <li>
          <a
            href='https://docs.oracle.com/javase/8/docs/api/java/time/MonthDay.html'>java.time.MonthDay</a>
          Immutable. Validates the day/month combination. Sample usage:
          <code>MonthDay.of(11, 7)</code>
        </li>
        <li>
          <a
            href='https://docs.oracle.com/javase/8/docs/api/java/time/Instant.html'>java.time.Instant</a>
          Immutable. Good fit with epoch seconds.
          <ol>
            <li><code>Instant.ofEpochSecond(1573391885)</code> Convert epoch seconds to an
              Instant.</li>
            <li><code>Instant.now()</code> Current time.</li>
            <li><code>asOf.atZone(tz.toZoneId()).toLocalDate()</code> Get a local date from
              the Instant <code>asOf</code>.</li>
          </ol>
        </li>
        <li>
          <a
            href='https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html'>java.time.ZonedDateTime</a>
          Immutable. Go from month, day, etc to an Instant, for example:
          <pre><code>
    ZonedDateTime.of(
        2019,
        11,
        7,
        8,
        21,
        0,
        0,
        TimeZone.getTimeZone(" US/Eastern") 
    ).toInstant()
    </code></pre>
        </li>
      </ul>
    </section>
