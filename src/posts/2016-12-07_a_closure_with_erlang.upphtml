<!--
A closure with Erlang
December 7, 2016
erlang, functional
-->
    <section>
    
        <p>I recently hit a programming task where a closure was the perfect solution.  I describe the task, define a closure, and then present the solution.
    
    	<figure>
        <img src='/img/full/nest.png' alt='A closeup of a robins nest with four blue eggs. class='webfeedsFeaturedVisual'/>
    	<figcaption>
           &copy; 2016 <a href='/imginfo/nest.html'>Ian Baldwin</a>
    	  for Unsplash
    	</figcaption>
    	</figure>
    
    </section>
    <section>
      <h2>What&rsquo;s the problem?</h2>
    
      <p>The <a href='https://github.com/martinrehfeld/elli_basicauth'>basic authentication middleware for Elli</a> is configured with an authorization function that takes three parameters: the request, the username and the password.  You configure the middleware with an <code>auth_fun</code> parameter,  is returned by the <code>auth_fun(Config)</code> in the code below:
    
            <pre><code>
    handle(Req, Config) ->
        {User, Password} = credentials(Req),
    
        case apply(auth_fun(Config), [Req, User, Password]) of
            unauthorized ->
                throw({401,
                       [{<<"WWW-Authenticate">>, auth_realm(Config)}],
                       <<"Unauthorized">>});
    
            forbidden ->
                throw({403, [], <<"Forbidden">>});
    
            hidden ->
                throw({404, [], <<>>});
    
            _ ->
                ignore
        end.
    </code></pre>
    
      <p>For example, a simple auth function that secures every resource is:
    
            <pre><code>
    <l>auth_fun(_Req, User, Password) ->
    <l>  case {User, Password} of
    <l>    case {User, Password} of
    <l>        {undefined, undefined}      -> unauthorized;
    <l>        {<<"admin">>, <<"secret">>} -> ok;
    <l>        {User, Password}            -> forbidden
    <l>    end.
    </code></pre>
    
    
      <p>How to remove the hard coded user/password without changing the function signature?
    
    </section>
    </section>
    
      <h2>What is a closure?</h2>
    
      <blockquote>
    <p>The most simple way to think of a closure is a function that can be stored as a variable (referred to as a "first-class function"), that has a special ability to access other variables local to the scope it was created in.
    <footer>Software Engineering Stack Exchange, <cite><a href="http://softwareengineering.stackexchange.com/a/40708">What is a closure?</a></cite> (retrieved November 30, 2016)</footer>
      </blockquote>
    
      <h3>Here&rsquo;s an example in JavaScript.</h3>
    
       <pre><code>
    var name = "mark";
    var f = function() { alert("Hello " + name);};
    f();
    </code></pre>
    
      <p>The variable <code>name</code> is defined and that variable is in scope and is used by the function <code>f</code>.  We could pass the variable <code>f</code> to another function and the variable <code>name</code> will still be in scope.  It is &ldquo;enclosed&rdquo; by the function.
    
       <p>And here is that code running:
    
      <figure>
    <img src="/img/javascript-closure.png" alt="Screen shot of running above code in Safari JavaScript console."/>
      </figure>
    
      <h3>And the equivalent code in Erlang.</h3>
    
            <pre><code>
    ~$ erl
    Erlang/OTP 19 [erts-8.0.1] [source-ca40008] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]
    
    Eshell V8.0.1  (abort with ^G)
    1> Name = "mark".
    "mark"
    2> F = fun() -> io:format("Hello ~s~n", [Name]) end.
    #Fun<erl_eval.20.52032458>
    3> F().
    Hello mark
    ok
    4> 
    </code></pre>
    
    </section>
    
    <section>
    <h2>The Solution</h2>
    
    <h3>A function that accepts credentials as it&rsquo;s argument.</h3>
    
    <p>The <code>build_auth</code> function takes a list of <code>{user, password}</code> tuples.  For example, 
    <code>[ {<<"admin">>, <<"secret">>} ]</code>.
    
            <pre><code>
    build_auth(Passwords) ->
        fun (_Req, undefined, undefined) -> unauthorized;
            (_Req, User, Password) ->
                case lists:member({User, Password}, Passwords) of 
                  true -> ok;
                  _ -> forbidden
                end
        end.
    </code></pre>
    
    <p>The syntax here is pretty interesting&mdash;the returned anonymous function uses pattern matching.
    
    <ul>
    <li>If both user/pass are undefined, return unauthorized (first pattern).</li>
    <li>If user/pass is a valid password, return ok (second pattern).</li>
    <li>If neither of those cases match, return forbidden (second pattern).</li>
    </ul>
    
    <h3>The Elli middleware config code.</h3>
    
    <p>Here&rsquo;s the final configuration of the middleware in the supervisor:
    
            <pre><code>
    init(_Args) ->
        Passwords = load_passwords(),
        BasicauthConfig = [{auth_fun, build_auth(Passwords)},
                           {auth_realm, <<"Admin Area">>}],
        MiddlewareConfig = [{mods,
                             [{elli_basicauth, BasicauthConfig},
                              {http_metric_handler, []}, {rest_handler, []}]}],
        ElliOpts = [{callback, elli_middleware},
                    {callback_args, MiddlewareConfig}, {port, env:port()}],
        ElliSpec = {metrics_http,
                    {elli, start_link, [ElliOpts]}, permanent, 5000, worker,
                    [elli]},
        {ok, {{one_for_one, 5, 10}, [ElliSpec]}}.
    </code></pre>
    
    <p>The <code>load_passwords</code> function is responsible for reading the credentials from disk.
    
    <h3>Note that this example is not production code.</h3>
    
    <p>In this example, the passwords are stored in disk in clear text.  In production, at the very least I would use super long random passwords and hash them in the on-disk secrets file.  And perhaps rate-limit failed login attempts.
    
    
    </section>
