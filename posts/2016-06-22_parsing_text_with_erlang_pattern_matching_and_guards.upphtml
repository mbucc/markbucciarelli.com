<!--
Parsing text with Erlang pattern matching and guards
June 22, 2016
erlang
-->
    <section>
    
        <p>A simple example of parsing a time string and that illustrates some Erlang pattern matching and guard basics.
    
    	<figure>
        <img src='/img/full/mn.png' alt='Spray painted letters MNOPQ on a city wall.'/>
    	<figcaption>
           &copy; 2016 <a href='/imginfo/mnopq.html'>Jon Tyson</a>
    	  for Unsplash
    	</figcaption>
    	</figure>
    
    </section>
    <section>
        <h2>Let&rsquo;s begin at the end.</h2>
    <pre><code>
    
    -module(m1).
    
    -export([parse_time_part/1]).
    
    % Given a string (e.g., "9:30 pm"), return the hour and minute as a list of
    % two integers.  If no meridian given, assume pm.
    parse_time_part(S) when is_list(S) ->
        {ok, HourMinute} = parse_time_parts(strip_tokens(S, ": ")),
        HourMinute.
    
    parse_time_parts([H, M, Meridian])
        when Meridian =:= "AM";
             Meridian =:= "am";
             Meridian =:= "a.m.";
             Meridian =:= "A.M." ->
        {ok, [HI, MI]} = parse_time_parts([H, M]),
        {ok, [HI - 12, MI]};
    parse_time_parts([H, M, Meridian])
        when Meridian =:= "PM";
             Meridian =:= "pm";
             Meridian =:= "p.m.";
             Meridian =:= "P.M." ->
        parse_time_parts([H, M]);
    parse_time_parts([H, M]) ->
        {ok, [HI, 0]} = parse_time_parts([H]),
        {I, _} = string:to_integer(M),
        {ok, [HI, I]};
    parse_time_parts([H]) ->
        {I, _} = string:to_integer(H),
        if
           I < 12 -> {ok, [I + 12, 0]};
           I >= 12 -> {ok, [I, 0]}
        end.
    
    % Tokenize based on characters in the string Sep and then strip any
    % trailing or leading spaces and commas from the tokens.
    strip_tokens(S, Sep) ->
        [string:strip(string:strip(X, both), both, $,)
             || X <- string:tokens(S, Sep)].
             
    -ifdef(TEST).
    -include_lib("eunit/include/eunit.hrl").
    
    strip_tokens_test() ->
        ?assertEqual(["Monday, April 11, 2016", "9:00 pm"],
                     (strip_tokens("Monday, April 11, 2016 ~ 9:00 pm", "~"))).
    
    parse_time_part_test() ->
        ?assertEqual([19, 0], (parse_time_part("7"))),
        ?assertEqual([17, 0], (parse_time_part("5:00"))),
        ?assertEqual([21, 30], (parse_time_part("9:30"))),
        ?assertEqual([17, 30], (parse_time_part("5:30 PM"))),
        ?assertEqual([9, 30], (parse_time_part("9:30 AM"))).
    
    -endif.
    </code></pre>
    
    <p>The tests pass:
    
    <pre><code>
    $ erlc -DTEST m1.erl
    $ erl -run m1 test -run init stop -noshell
      Test passed.
    $
    </code></pre>
    
    <section>
    <h2>Function guards assert what arguments the function accepts.</h2>
    <pre><code>
    parse_time_part(S) when is_list(S) ->
        {ok, HourMinute} = parse_time_parts(strip_tokens(S, ": ")),
        HourMinute.
    </code></pre>
    
    <p>The guard is <span class="code with-wrapping">when is_list(S)</span>.
    This is a <a href='http://www.cis.upenn.edu/~matuszek/Concise%20Guides/Concise%20Erlang.html#type_t_and_c'>type test</a> that declares that the argument must be a list.
    (In Erlang, strings are lists of integers.)  The guard is both a declaration and an assertion:
    
    <pre><code>
    ~$ erl
    Erlang/OTP 18 [erts-7.3] [source-84db331] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]
    
    Eshell V7.3  (abort with ^G)
    1> c(m1).
    {ok,m1}
    2> m1:parse_time_part(an_atom). 
    ** exception error: no function clause matching 
                        m1:parse_time_part(an_atom) (m1.erl, line 7)
    3> q().
    ok
    5> ~$ 
    </code></pre>
    
    <p>Guards are limited to the following:
    <ul>
    <li>type tests</li>
    <li> boolean operators</li>
    <li> bitwise operators</li>
    <li> arithmetic operators</li>
    <li> relational operators</li>
    <li> and <a href="http://www.cis.upenn.edu/~matuszek/Concise%20Guides/Concise%20Erlang.html#pm_guards">a few built in functions</a> (aka "BIFs")
    </ul>
    
    
    
    <section>
    
    <h2>In a guard, a semicolon means OR.</h2>
    <pre><code>
    parse_time_parts([H, M, Meridian])
        when Meridian =:= "AM";
             Meridian =:= "am";
             Meridian =:= "a.m.";
             Meridian =:= "A.M." ->
        {ok, [HI, MI]} = parse_time_parts([H, M]),
        {ok, [HI - 12, MI]};
    </code></pre>
    
    <p>There are four values of <span class=code>Meridian</span> this function will
    accept: AM, am, a.m. and A.M.
    
    <p>To AND together guards, separate them with a comma.
    </section>
    
    <section>
    <h2>The order of functions matter.</h2>
    
    <pre><code>
    parse_time_parts([H, M, Meridian])
        when Meridian =:= "AM";
             Meridian =:= "am";
             Meridian =:= "a.m.";
             Meridian =:= "A.M" ->
        {ok, [HI, MI]} = parse_time_parts([H, M]),
        {ok, [HI - 12, MI]};
    parse_time_parts([H, M, Meridian])
        when Meridian =:= "PM";
             Meridian =:= "pm";
             Meridian =:= "p.m.";
             Meridian =:= "P.M" ->
        parse_time_parts([H, M]);
    </code></pre>
    
    	<p>Erlang will try the AM version of the function before the PM version, simply because it occurs first in the source.  It doesn&rsquo;t matter in this code, but often this feature is useful.
    </section>
