<!--
How to return JSON from an Erlang web service
January 4, 2017
erlang
-->
    <section>
    
        <p>In this HOWTO, we use Elli and JSX to return JSON from an Erlang web service.
    
    	<figure>
        <img src='/img/full/blackboard.png' alt='A blackboard with math notation.' class='webfeedsFeaturedVisual'/>
    	<figcaption>
           &copy; 2016 <a href='/imginfo/blackboard.html'>Roman Mager</a>
    	  for Unsplash
    	</figcaption>
    	</figure>
    
    </section>
    <section>
    
    <p>Tools used in this tutorial:
    <ol>
        <li>Erlang/OTP 19</li>
        <li><a href='https://github.com/knutin/elli'>Elli 1.0.5</a></li>
        <li><a href='https://github.com/talentdeficit/jsx'>JSX 2.8.1</a></li>
        <li>GNU Make 3.81</li>
        <li>git 1.9.5</li>
    </ol>
    
    <p>All of the code used in this blog can be found at <a href="https://github.com/mbucc/markbucciarelli.com/tree/master/sandbox/json">https://github.com/mbucc/markbucciarelli.com/tree/master/sandbox/json</a>.
    
    <h2>Step 1. Create a Makefile that retrieves the required dependencies.</h2>
    
    <p>Erlang lets you define a library directory on your system with the environmental variable <code>ERL_LIBS</code>.  Typically you would set this to something like <code>/usr/local/lib/erl</code> but in this example we put a <code>lib</code> directory under the current working directory. 
    
            <pre><code>
    all: ./lib/jsx-2.8.1/ebin ./lib/elli-1.0.5/ebin ./lib/elli-1.0.5/include
    
    #==============================================================================
    #
    #                           D E P E N D E N C I E S
    #
    #  Check out Elli and JSX from github to $HOME/src, compile each and copy the
    #  ebin directories and the elli include directory under ./lib.
    #==============================================================================
    
    ${HOME}/src/elli/ebin:
    	(cd ${HOME}/src; git clone https://github.com/knutin/elli.git)
    	(cd ${HOME}/src/elli ; git checkout tags/v1.0.5 ; make)
    
    ./lib/elli-1.0.5/ebin: ${HOME}/src/elli/ebin
    	mkdir -p ./lib/elli-1.0.5
    	cp -r $< ./lib/elli-1.0.5
    
    ./lib/elli-1.0.5/include: ${HOME}/src/elli
    	mkdir -p ./lib/elli-1.0.5
    	cp -r ${HOME}/src/elli/include ./lib/elli-1.0.5
    
    ${HOME}/src/jsx/_build/default/lib/jsx/ebin:
    	(cd ${HOME}/src; git clone https://github.com/talentdeficit/jsx.git)
    	(cd ${HOME}/src/jsx ; git checkout tags/v2.8.1 ; rebar3 compile)
    
    ./lib/jsx-2.8.1/ebin: ${HOME}/src/jsx/_build/default/lib/jsx/ebin
    	mkdir -p ./lib/jsx-2.8.1
    	cp -r $< ./lib/jsx-2.8.1
    </code></pre>
    
    </section>
    
    <section>
    <h2>Step 2. Create Elli handler.</h2>
    
    	<p>This handler returns a JSON representation of event data for the resource <code>/events</code>.  The event data<label for='mn-jsx' class='margin-toggle'>&#8853;</label>
    <input type="checkbox" id="mn-jsx" class="margin-toggle"/>
    <span class="marginnote">
      JSX does not encode records, only proplists and maps.  See the JSX <a href='https://github.com/talentdeficit/jsx#quickstart'>README quickstart</a> for more details.
    </span>
    is passed in as a configuration argument, as described in the next section.
    
            <pre><code>
    -module(json_handler).
    
    -export([handle/2, handle_event/3]).
    
    -include_lib("elli/include/elli.hrl").
    
    -behaviour(elli_handler).
    
    handle(Req, Args) ->
        handle(Req#req.method, elli_request:path(Req), Req, Args).
    
    handle(&rsquo;GET&rsquo;, [<<"events">>], _Req, Args) ->
        Events = proplists:get_value(events, Args),
        {ok, [], jsx:encode(Events)};
    handle(_, _, _Req, _Args) -> {404, [], <<"Not Found">>}.
    
    handle_event(Event, Data, Args) ->
        io:format("Event=~p~n, Data=~p~n, Args=~p~n",
                  [Event, Data, Args]),
        ok.
    </code></pre>
    
    <p>This handler also dumps each Elli event to stdout because it implements the <code>handle_event</code> method of the elli behavior.
    
    </section>
    
    <section>
    
    <h2>Step 3. Use OTP supervisor behavior to start Elli on port 3000.</h2>
    
    <p>The <code>MiddlewareConfig</code> variable configures the <code>json_handler</code> to get the event data returned by the <code>test_events()</code> method.  In a real application you would pass in the registered name of an ets store, or a database connection pool, or some other set of credentials to the data store.
    
            <pre><code>
    -module(json_sup).
    
    -behaviour(supervisor).
    
    -export([start_link/0]).
    
    -export([init/1]).
    
    start_link() ->
        supervisor:start_link({local, ?MODULE}, ?MODULE, []).
    
    test_events() ->
        E1 = [{id, 1}, {name, <<"test1">>}],
        E2 = [{id, 2}, {name, <<"test2">>}],
        [E1, E2].
    
    init(_Args) ->
        Port = 3000,
        MiddlewareConfig = [{mods,
                             [{json_handler, [{events, test_events()}]}]}],
        ElliOpts = [{callback, elli_middleware},
                    {callback_args, MiddlewareConfig}, {port, Port}],
        ElliSpec = {json, {elli, start_link, [ElliOpts]},
                    permanent, 5000, worker, [elli]},
        io:format("starting server on port ~p~n", [Port]),
        {ok, {{one_for_one, 5, 10}, [ElliSpec]}}.
    </code></pre>
    </section>
    
    <section>
    <h2>Step 4. Write the application behavior and resource file.</h2>
    
    <h3>Implement the application behavior.</h3>
    
            <pre><code>
    -module(json).
    
    -behavior(application).
    
    -export([start/0, start/2, stop/1]).
    
    start(_Type, _Args) -> json_sup:start_link().
    
    start() -> application:start(json).
    
    stop(_State) -> ok.
    </code></pre>
    
    <h3>Define the application resources.</h3>
    
            <pre><code>
    {application, json,
      [{description, "Produce JSON with Erlang"},
       {vsn, "1.0.0"},
       {modules, [json, json_sup, json_handler]},
       {registered, []},
       {applications, [kernel, stdlib]},
       {mod, {json,[]}}]}.
    </code></pre>
    
    </section>
    
    <section>
    <h2>Step 5. Update Makefile and create a run script.</h2>
    
    <h3>The run script starts the server from the command line.</h3>
    
            <pre><code>
    #! /bin/sh -e
    
    ERL_LIBS=./lib erl -noshell -s json
    </code></pre>
    
    <h3>Update the Makefile to compile Erlang sources.</h3>
    
    
            <pre><code>
    all: json_handler.beam json_sup.beam json.beam
    
    #==============================================================================
    #
    #                           D E P E N D E N C I E S
    #
    #  Check out Elli and JSX from github to $HOME/src, compile each and copy
    #  ebin directory under ./lib.
    #==============================================================================
    
    ${HOME}/src/elli/ebin:
    	(cd ${HOME}/src; git clone https://github.com/knutin/elli.git)
    	(cd ${HOME}/src/elli ; git checkout tags/v1.0.5 ; make)
    
    ./lib/elli-1.0.5/ebin: ${HOME}/src/elli/ebin
    	mkdir -p ./lib/elli-1.0.5
    	cp -r $< ./lib/elli-1.0.5
    
    ./lib/elli-1.0.5/include: ${HOME}/src/elli
    	mkdir -p ./lib/elli-1.0.5
    	cp -r ${HOME}/src/elli/include ./lib/elli-1.0.5
    
    ${HOME}/src/jsx/_build/default/lib/jsx/ebin:
    	(cd ${HOME}/src; git clone https://github.com/talentdeficit/jsx.git)
    	(cd ${HOME}/src/jsx ; git checkout tags/v2.8.1 ; rebar3 compile)
    
    ./lib/jsx-2.8.1/ebin: ${HOME}/src/jsx/_build/default/lib/jsx/ebin
    	mkdir -p ./lib/jsx-2.8.1
    	cp -r $< ./lib/jsx-2.8.1
    
    
    #==============================================================================
    #
    #                      C O M P I L E   A N D   C L E A N 
    #
    #==============================================================================
    
    %.beam: %.erl ./lib/elli-1.0.5/ebin ./lib/jsx-2.8.1/ebin ./lib/elli-1.0.5/include
    	ERL_LIBS=./lib erlc $<
    
    .PHONY: clean
    clean:
    	rm -f *.beam
    	rm -rf ./lib
    </code></pre>
    </section>
    
    <section>
    <h2>The Result.</h2>
    
    <h3>Start the server.</h3>
    
            <pre><code>
    $ ./run.sh 
    starting server on port 3000
    Event=elli_startup
    , Data=[]
    , Args=[{events,[[{id,1},{name,<<"test1">>}],[{id,2},{name,<<"test2">>}]]}]
    </code></pre>
    
    <p>Elli fires the <code>elli_startup</code> event and we are up and running.
    
    <h3>Hit this with curl, and we get our events back in JSON.</h3>
    
            <pre><code>
    $ curl -D- localhost:3000/events
    HTTP/1.1 200 OK
    Connection: Keep-Alive
    Content-Length: 49
    
    [{"id":1,"name":"test1"},{"id":2,"name":"test2"}]$
    </code></pre>
    
    <h3>And Ellie fires two events while processing the request.</h3>
    
            <pre><code>
    Event=request_complete
    , Data=[{req,&rsquo;GET&rsquo;,
                [<<"events">>],
                [],<<"/events">>,
                {1,1},
                [{<<"Accept">>,<<"*/*">>},
                 {<<"User-Agent">>,<<"curl/7.51.0">>},
                 {<<"Host">>,<<"localhost:3000">>}],
                <<>>,<0.69.0>,
                {plain,#Port<0.428>},
                {elli_middleware,
                    [{mods,
                         [{json_handler,
                              [{events,
                                   [[{id,1},{name,<<"test1">>}],
                                    [{id,2},{name,<<"test2">>}]]}]}]}]}},
            200,
            [{<<"Connection">>,<<"Keep-Alive">>},{<<"Content-Length">>,49}],
            <<"[{\"id\":1,\"name\":\"test1\"},{\"id\":2,\"name\":\"test2\"}]">>,
            [{user_start,{1483,499053,904446}},
             {request_end,{1483,499053,910409}},
             {accepted,{1483,499053,904331}},
             {user_end,{1483,499053,910369}},
             {headers_end,{1483,499053,904423}},
             {body_end,{1483,499053,904445}},
             {request_start,{1483,499053,904411}}]]
    , Args=[{events,[[{id,1},{name,<<"test1">>}],[{id,2},{name,<<"test2">>}]]}]
    Event=request_closed
    , Data=[]
    , Args=[{events,[[{id,1},{name,<<"test1">>}],[{id,2},{name,<<"test2">>}]]}]
    </code></pre>
    
    
    <p>Towards the end of the <code>request_complete</code> event, you can see the timings that were used to produce the Prometheus metrics in <a href="2016-11-23_a_simple_erlang_application_with_prometheus.html">A Simple Erlang Application, with Prometheus</a>.
    
    </section>
    
    <section>
      <h2>Performance Note</h2>
      <p>In the blog entry <a href='https://lolware.net/2016/05/23/use-protobufs.html'><em>Use protobufs - now</em></a>, techion does a nice comparison of Jiffy versus JSX for encoding JSON.  Jiffy uses a C nif, and is more than five-times as fast as JSX.  JSX isn&rsquo;t that shabby, encoding 4,000 100-element lists every second.
    
      <p>You can find a conversation about this blog entry where techion shared his blog entry on <a href='https://www.reddit.com/r/erlang/comments/5m3wof/how_to_return_json_from_an_erlang_web_service/'>here</a> on Reddit. 
    </section>
    
    <section>
       <h2>Change Log</h2>
    
       <h3>Jan. 6, 2017</h3>
     <ul>
       <li>Move note about code being on github to top.</li>
       <li>Add link to reddit conversation.</li>
       <li>Add link to lolware.</li>
    </ul>
    
    </section>
