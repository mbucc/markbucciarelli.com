<!--
How to return JSON from an Erlang web service
January 4, 2017
erlang
-->
    <section>
    
        <p>In this HOWTO, we use Elli and JSX to return JSON from an Erlang web service.
    
    	<figure>
        <img src='/img/full/blackboard.png' alt='A blackboard with math notation.' class='webfeedsFeaturedVisual'/>
    	<figcaption>
           &copy; 2016 <a href='/imginfo/blackboard.html'>Roman Mager</a>
    	  for Unsplash
    	</figcaption>
    	</figure>
    
    </section>
    <section>
    
    <p>Tools used in this tutorial:
    <ol>
        <li>Erlang/OTP 19</li>
        <li><a href='https://github.com/knutin/elli'>Elli 1.0.5</a></li>
        <li><a href='https://github.com/talentdeficit/jsx'>JSX 2.8.1</a></li>
        <li>GNU Make 3.81</li>
        <li>git 1.9.5</li>
    </ol>
    
    <p>All of the code used in this blog can be found at <a href="https://github.com/mbucc/markbucciarelli.com/tree/master/sandbox/json">https://github.com/mbucc/markbucciarelli.com/tree/master/sandbox/json</a>.
    
    <h2>Step 1. Create a Makefile that retrieves the required dependencies.</h2>
    
    <p>Erlang lets you define a library directory on your system with the environmental variable <code>ERL_LIBS</code>.  Typically you would set this to something like <code>/usr/local/lib/erl</code> but in this example we put a <code>lib</code> directory under the current working directory. 
    
            <pre class='code with-wrapping fullwidth'>
    <line>all: ./lib/jsx-2.8.1/ebin ./lib/elli-1.0.5/ebin ./lib/elli-1.0.5/include</line>
    <line></line>
    <line>#==============================================================================</line>
    <line>#</line>
    <line>#                           D E P E N D E N C I E S</line>
    <line>#</line>
    <line>#  Check out Elli and JSX from github to $HOME/src, compile each and copy the</line>
    <line>#  ebin directories and the elli include directory under ./lib.</line>
    <line>#==============================================================================</line>
    <line></line>
    <line>${HOME}/src/elli/ebin:</line>
    <line>	(cd ${HOME}/src; git clone https://github.com/knutin/elli.git)</line>
    <line>	(cd ${HOME}/src/elli ; git checkout tags/v1.0.5 ; make)</line>
    <line></line>
    <line>./lib/elli-1.0.5/ebin: ${HOME}/src/elli/ebin</line>
    <line>	mkdir -p ./lib/elli-1.0.5</line>
    <line>	cp -r $< ./lib/elli-1.0.5</line>
    <line></line>
    <line>./lib/elli-1.0.5/include: ${HOME}/src/elli</line>
    <line>	mkdir -p ./lib/elli-1.0.5</line>
    <line>	cp -r ${HOME}/src/elli/include ./lib/elli-1.0.5</line>
    <line></line>
    <line>${HOME}/src/jsx/_build/default/lib/jsx/ebin:</line>
    <line>	(cd ${HOME}/src; git clone https://github.com/talentdeficit/jsx.git)</line>
    <line>	(cd ${HOME}/src/jsx ; git checkout tags/v2.8.1 ; rebar3 compile)</line>
    <line></line>
    <line>./lib/jsx-2.8.1/ebin: ${HOME}/src/jsx/_build/default/lib/jsx/ebin</line>
    <line>	mkdir -p ./lib/jsx-2.8.1</line>
    <line>	cp -r $< ./lib/jsx-2.8.1</line>
    </pre>
    
    </section>
    
    <section>
    <h2>Step 2. Create Elli handler.</h2>
    
    	<p>This handler returns a JSON representation of event data for the resource <code>/events</code>.  The event data<label for='mn-jsx' class='margin-toggle'>&#8853;</label>
    <input type="checkbox" id="mn-jsx" class="margin-toggle"/>
    <span class="marginnote">
      JSX does not encode records, only proplists and maps.  See the JSX <a href='https://github.com/talentdeficit/jsx#quickstart'>README quickstart</a> for more details.
    </span>
    is passed in as a configuration argument, as described in the next section.
    
            <pre class='code with-wrapping fullwidth'>
    <line>-module(json_handler).</line>
    <line></line>
    <line>-export([handle/2, handle_event/3]).</line>
    <line></line>
    <line>-include_lib("elli/include/elli.hrl").</line>
    <line></line>
    <line>-behaviour(elli_handler).</line>
    <line></line>
    <line>handle(Req, Args) -></line>
    <line>    handle(Req#req.method, elli_request:path(Req), Req, Args).</line>
    <line></line>
    <line>handle(&rsquo;GET&rsquo;, [<<"events">>], _Req, Args) -></line>
    <line>    Events = proplists:get_value(events, Args),</line>
    <line>    {ok, [], jsx:encode(Events)};</line>
    <line>handle(_, _, _Req, _Args) -> {404, [], <<"Not Found">>}.</line>
    <line></line>
    <line>handle_event(Event, Data, Args) -></line>
    <line>    io:format("Event=~p~n, Data=~p~n, Args=~p~n",</line>
    <line>              [Event, Data, Args]),</line>
    <line>    ok.</line>
    </pre>
    
    <p>This handler also dumps each Elli event to stdout because it implements the <code>handle_event</code> method of the elli behavior.
    
    </section>
    
    <section>
    
    <h2>Step 3. Use OTP supervisor behavior to start Elli on port 3000.</h2>
    
    <p>The <code>MiddlewareConfig</code> variable configures the <code>json_handler</code> to get the event data returned by the <code>test_events()</code> method.  In a real application you would pass in the registered name of an ets store, or a database connection pool, or some other set of credentials to the data store.
    
            <pre class='code with-wrapping fullwidth'>
    <line>-module(json_sup).</line>
    <line></line>
    <line>-behaviour(supervisor).</line>
    <line></line>
    <line>-export([start_link/0]).</line>
    <line></line>
    <line>-export([init/1]).</line>
    <line></line>
    <line>start_link() -></line>
    <line>    supervisor:start_link({local, ?MODULE}, ?MODULE, []).</line>
    <line></line>
    <line>test_events() -></line>
    <line>    E1 = [{id, 1}, {name, <<"test1">>}],</line>
    <line>    E2 = [{id, 2}, {name, <<"test2">>}],</line>
    <line>    [E1, E2].</line>
    <line></line>
    <line>init(_Args) -></line>
    <line>    Port = 3000,</line>
    <line>    MiddlewareConfig = [{mods,</line>
    <line>                         [{json_handler, [{events, test_events()}]}]}],</line>
    <line>    ElliOpts = [{callback, elli_middleware},</line>
    <line>                {callback_args, MiddlewareConfig}, {port, Port}],</line>
    <line>    ElliSpec = {json, {elli, start_link, [ElliOpts]},</line>
    <line>                permanent, 5000, worker, [elli]},</line>
    <line>    io:format("starting server on port ~p~n", [Port]),</line>
    <line>    {ok, {{one_for_one, 5, 10}, [ElliSpec]}}.</line>
    </pre>
    </section>
    
    <section>
    <h2>Step 4. Write the application behavior and resource file.</h2>
    
    <h3>Implement the application behavior.</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>-module(json).</line>
    <line></line>
    <line>-behavior(application).</line>
    <line></line>
    <line>-export([start/0, start/2, stop/1]).</line>
    <line></line>
    <line>start(_Type, _Args) -> json_sup:start_link().</line>
    <line></line>
    <line>start() -> application:start(json).</line>
    <line></line>
    <line>stop(_State) -> ok.</line>
    </pre>
    
    <h3>Define the application resources.</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>{application, json,</line>
    <line>  [{description, "Produce JSON with Erlang"},</line>
    <line>   {vsn, "1.0.0"},</line>
    <line>   {modules, [json, json_sup, json_handler]},</line>
    <line>   {registered, []},</line>
    <line>   {applications, [kernel, stdlib]},</line>
    <line>   {mod, {json,[]}}]}.</line>
    </pre>
    
    </section>
    
    <section>
    <h2>Step 5. Update Makefile and create a run script.</h2>
    
    <h3>The run script starts the server from the command line.</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>#! /bin/sh -e</line>
    <line></line>
    <line>ERL_LIBS=./lib erl -noshell -s json</line>
    </pre>
    
    <h3>Update the Makefile to compile Erlang sources.</h3>
    
    
            <pre class='code with-wrapping fullwidth'>
    <line>all: json_handler.beam json_sup.beam json.beam</line>
    <line></line>
    <line>#==============================================================================</line>
    <line>#</line>
    <line>#                           D E P E N D E N C I E S</line>
    <line>#</line>
    <line>#  Check out Elli and JSX from github to $HOME/src, compile each and copy</line>
    <line>#  ebin directory under ./lib.</line>
    <line>#==============================================================================</line>
    <line></line>
    <line>${HOME}/src/elli/ebin:</line>
    <line>	(cd ${HOME}/src; git clone https://github.com/knutin/elli.git)</line>
    <line>	(cd ${HOME}/src/elli ; git checkout tags/v1.0.5 ; make)</line>
    <line></line>
    <line>./lib/elli-1.0.5/ebin: ${HOME}/src/elli/ebin</line>
    <line>	mkdir -p ./lib/elli-1.0.5</line>
    <line>	cp -r $< ./lib/elli-1.0.5</line>
    <line></line>
    <line>./lib/elli-1.0.5/include: ${HOME}/src/elli</line>
    <line>	mkdir -p ./lib/elli-1.0.5</line>
    <line>	cp -r ${HOME}/src/elli/include ./lib/elli-1.0.5</line>
    <line></line>
    <line>${HOME}/src/jsx/_build/default/lib/jsx/ebin:</line>
    <line>	(cd ${HOME}/src; git clone https://github.com/talentdeficit/jsx.git)</line>
    <line>	(cd ${HOME}/src/jsx ; git checkout tags/v2.8.1 ; rebar3 compile)</line>
    <line></line>
    <line>./lib/jsx-2.8.1/ebin: ${HOME}/src/jsx/_build/default/lib/jsx/ebin</line>
    <line>	mkdir -p ./lib/jsx-2.8.1</line>
    <line>	cp -r $< ./lib/jsx-2.8.1</line>
    <line></line>
    <line></line>
    <line>#==============================================================================</line>
    <line>#</line>
    <line>#                      C O M P I L E   A N D   C L E A N </line>
    <line>#</line>
    <line>#==============================================================================</line>
    <line></line>
    <line>%.beam: %.erl ./lib/elli-1.0.5/ebin ./lib/jsx-2.8.1/ebin ./lib/elli-1.0.5/include</line>
    <line>	ERL_LIBS=./lib erlc $<</line>
    <line></line>
    <line>.PHONY: clean</line>
    <line>clean:</line>
    <line>	rm -f *.beam</line>
    <line>	rm -rf ./lib</line>
    </pre>
    </section>
    
    <section>
    <h2>The Result.</h2>
    
    <h3>Start the server.</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ ./run.sh </line>
    <line>starting server on port 3000</line>
    <line>Event=elli_startup</line>
    <line>, Data=[]</line>
    <line>, Args=[{events,[[{id,1},{name,<<"test1">>}],[{id,2},{name,<<"test2">>}]]}]</line>
    </pre>
    
    <p>Elli fires the <code>elli_startup</code> event and we are up and running.
    
    <h3>Hit this with curl, and we get our events back in JSON.</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ curl -D- localhost:3000/events</line>
    <line>HTTP/1.1 200 OK</line>
    <line>Connection: Keep-Alive</line>
    <line>Content-Length: 49</line>
    <line></line>
    <line>[{"id":1,"name":"test1"},{"id":2,"name":"test2"}]$</line>
    </pre>
    
    <h3>And Ellie fires two events while processing the request.</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>Event=request_complete</line>
    <line>, Data=[{req,&rsquo;GET&rsquo;,</line>
    <line>            [<<"events">>],</line>
    <line>            [],<<"/events">>,</line>
    <line>            {1,1},</line>
    <line>            [{<<"Accept">>,<<"*/*">>},</line>
    <line>             {<<"User-Agent">>,<<"curl/7.51.0">>},</line>
    <line>             {<<"Host">>,<<"localhost:3000">>}],</line>
    <line>            <<>>,<0.69.0>,</line>
    <line>            {plain,#Port<0.428>},</line>
    <line>            {elli_middleware,</line>
    <line>                [{mods,</line>
    <line>                     [{json_handler,</line>
    <line>                          [{events,</line>
    <line>                               [[{id,1},{name,<<"test1">>}],</line>
    <line>                                [{id,2},{name,<<"test2">>}]]}]}]}]}},</line>
    <line>        200,</line>
    <line>        [{<<"Connection">>,<<"Keep-Alive">>},{<<"Content-Length">>,49}],</line>
    <line>        <<"[{\"id\":1,\"name\":\"test1\"},{\"id\":2,\"name\":\"test2\"}]">>,</line>
    <line>        [{user_start,{1483,499053,904446}},</line>
    <line>         {request_end,{1483,499053,910409}},</line>
    <line>         {accepted,{1483,499053,904331}},</line>
    <line>         {user_end,{1483,499053,910369}},</line>
    <line>         {headers_end,{1483,499053,904423}},</line>
    <line>         {body_end,{1483,499053,904445}},</line>
    <line>         {request_start,{1483,499053,904411}}]]</line>
    <line>, Args=[{events,[[{id,1},{name,<<"test1">>}],[{id,2},{name,<<"test2">>}]]}]</line>
    <line>Event=request_closed</line>
    <line>, Data=[]</line>
    <line>, Args=[{events,[[{id,1},{name,<<"test1">>}],[{id,2},{name,<<"test2">>}]]}]</line>
    </pre>
    
    
    <p>Towards the end of the <code>request_complete</code> event, you can see the timings that were used to produce the Prometheus metrics in <a href="2016-11-23_a_simple_erlang_application_with_prometheus.html">A Simple Erlang Application, with Prometheus</a>.
    
    </section>
    
    <section>
      <h2>Performance Note</h2>
      <p>In the blog entry <a href='https://lolware.net/2016/05/23/use-protobufs.html'><em>Use protobufs - now</em></a>, techion does a nice comparison of Jiffy versus JSX for encoding JSON.  Jiffy uses a C nif, and is more than five-times as fast as JSX.  JSX isn&rsquo;t that shabby, encoding 4,000 100-element lists every second.
    
      <p>You can find a conversation about this blog entry where techion shared his blog entry on <a href='https://www.reddit.com/r/erlang/comments/5m3wof/how_to_return_json_from_an_erlang_web_service/'>here</a> on Reddit. 
    </section>
    
    <section>
       <h2>Change Log</h2>
    
       <h3>Jan. 6, 2017</h3>
     <ul>
       <li>Move note about code being on github to top.</li>
       <li>Add link to reddit conversation.</li>
       <li>Add link to lolware.</li>
    </ul>
    
    </section>
