---
title: The essence of OTP
date: August 3, 2016
tags: erlang
---

<section>

    <p>What is the most important section in Joe Armstrong&lsquo;s Erlang book? <em>The Road to the Generic Server.</em>  This post breaks down the first step along that road, illuminating the main idea behind OTP behaviors.

	<figure>
    <img src="/img/full/lightbulb.png" alt="Single bright, old-fashioned lightbulb against black background. class="webfeedsFeaturedVisual"/>
	<figcaption>
       &copy; 2016 <a href="/imginfo/lightbulb.html">Milind Kaduskar</a>
	  for Unsplash
	</figcaption>
	</figure>

</section>
<section>
    <div class="epigraph">
    <blockquote>
        <p>This is the most important section in the entire book, so read it once, read it twice, read it a hundred times&mdash;just make sure the message sinks in.
        <footer>Joe Armstrong, <em>The Road to the Generic Server</em>, <cite><a href="https://pragprog.com/book/jaerlang2/programming-erlang">Programming Erlang (2nd edition)</a></cite>  (2013)</footer>
    </blockquote>
    </div>

</section>

<section>

    <h2>A plug for the Programming Erlang book.</h2>

        <p>Before I dig into the code, a word or two about the book <a href="https://pragprog.com/book/jaerlang2/programming-erlang">Programming Erlang</a>.  I really like this book. I can jump from section to section, and it works; each section stands on it&rsquo;s own.  The best part is the examples; they are super creative and simple at the same time&mdash;a rare combination and one that shows off the power and beauty of the Erlang language.

        <p>For example, in the chapter I am going over in this blog entry, he builds from a very simple generic server (the one I cover), and then layers in transaction management and hot code swapping in an easy-to-follow and a ridiculously small number of lines of code.  (Turns out this final server example is Joe Armstrong&rsquo;s <a href="http://joearms.github.io/2013/11/21/My-favorite-erlang-program.html">favorite Erlang program</a>.)

        <p>Highly recommended.

    <h2>Start the name server.</h2>

        <blockquote>
            <p>The idea is to divide the code for a process in a generic part (a behaviour module) and a specific part (a callback module).
            <footer>erlang.org, <cite><a href="http://erlang.org/doc/design_principles/des_princ.html">OTP Design Principles, Overview</a></cite> (retrieved August 3, 2016)</footer>
        </blockquote>

        <p>The server in this example is a name server.  It is a typical setup, where you have many clients and a single server that is synchronizing access to a shared resource; in this case, that resource is an in-memory hash-table that maps names to locations.

        <p>I&rsquo;ll show the code below, but the way I really understood the code was to break it down into
a message sequence chart<label for="mn-msc" class="margin-toggle">&#8853;</label>,
<input type="checkbox" id="mn-msc" class="margin-toggle"/>
<span class="marginnote">
        <em>How to read a message sequence chart</em>: The boxes represent processes
        and the solid arrows are messages.  The dotted arrows are responses.
        A global clock is assumed, and time runs from top to bottom. The distances between the messages represent time order but not scale.
        The borders represent the outside environment; for example, the Erlang shell.
</span>
    so I&rsquo;ll start with that:

        <figure>
        <img src="/img/start_server.png" alt="Messages sent when starting up a name server."/></a>
	    </figure>

        <p>The key here is to look at responsibilities of the application-specific code: ns.erl
        <ul>
            <li>only get&rsquo;s one message during server startup,</li>
            <li>simply returns the State the server should start up with,</li>
            <li>has zero responsibility for details of starting the server.</li>
         </ul>
</section>

<section>

    <h2>Add a name to the name server.</h2>

        <p>Now that the name server is running, we add a name.

        <figure>
        <img src="/img/add_a_name.png" alt="Messages sent when starting add a name to name server."/></a>
	    </figure>

        <p>Again, focus on ns.erl.  Here we have the basic idiom that is used over and over by OTP:
        <ol>
            <li>the environment makes a method call to our application-specific code</li>
            <li>our app sends that message to the server&rsquo;s mailbox (queue)</li>
            <li>the server reads messages off the queue (sequentially)</li>
            <li>the server calls our app code to handle the message</li>
            <li>the return value cascades back to the caller.</li>
        </ol>

        <p>At first glance, I thought this was very complex.  But once you get it (and it took me a few days of thinking hard to really grok it), the benefits are pretty sweet:
        <ul>
            <li>your application code is purely sequential,</li>
            <li>no locks and you get a guarantee of no race conditions around using your shared resource,</li>
            <li>you don&rsquo;t have to write any of the server code.</li>
        </ul>
</section>
<section>

    <h2>The generic and specific modules.</h2>

        <p>ns.erl (the specific code)

        <pre class="code with-wrapping fullwidth">
<line>-module(ns).</line>
<line></line>
<line>-export([add/2, find/1, handle/2, init/0]).</line>
<line></line>
<line>-import(server1, [rpc/2]).</line>
<line></line>
<line>%% client routines</line>
<line></line>
<line>add(Name, Place) -></line>
<line>    rpc(ns, {add, Name, Place}).</line>
<line></line>
<line>find(Name) -> rpc(ns, {find, Name}).</line>
<line></line>
<line>%% callback routines</line>
<line></line>
<line>init() -> dict:new().</line>
<line></line>
<line>handle({add, Name, Place}, Dict) -></line>
<line>    {ok, dict:store(Name, Place, Dict)};</line>
<line>handle({find, Name}, Dict) -></line>
<line>    {dict:find(Name, Dict), Dict}.</line>
</pre>

        <p>server1.erl (the generic code)
        <pre class="code with-wrapping fullwidth">
<line>-module(server1).</line>
<line></line>
<line>-export([rpc/2, start/2]).</line>
<line></line>
<line>start(Name, Mod) -></line>
<line>    Pid = spawn(fun () -> loop(Name, Mod, Mod:init()) end),</line>
<line>    io:format("~p~n", [Pid]),</line>
<line>    register(Name, Pid).</line>
<line></line>
<line>rpc(Name, Request) -></line>
<line>    Name ! {self(), Request},</line>
<line>    receive {Name, Response} -> Response end.</line>
<line></line>
<line>loop(Name, Mod, State) -></line>
<line>    receive</line>
<line>      {From, Request} -></line>
<line>          {Response, State1} = Mod:handle(Request, State),</line>
<line>          From ! {Name, Response},</line>
<line>          loop(Name, Mod, State1)</line>
<line>    end.</line>
</pre>

</section>

<section>

    <h2>How does this all relate to OTP behaviors?</h2>

<p>The pattern in this simple example shows how most<label for="mn-most" class="margin-toggle">&#8853;</label>
<input type="checkbox" id="mn-most" class="margin-toggle"/>
<span class="marginnote">
  The <a href="2016-09-14_simple_gen_event_example.html">gen_event</a> OTP behavior is a different beast.
</span>
OTP behaviors work.

<h3>The specific code defines the public api.</h3>

    <p><pre class="code with-wrapping fullwidth">
<line>-export([add/2, find/1, &hellip;]).</line>
</pre>


<h3>The public api forwards the message to the generic server.</h3>

    <p>This example: 
	<pre class="code with-wrapping fullwidth">
<line>add(Name, Place) -></line>
<line>    rpc(ns, {add, Name, Place}).</line>
<line></line>
<line>find(Name) -> rpc(ns, {find, Name}).</line>
<line></line>
</pre>


	<p>With a gen_server<label for="mn-no_prefix" class="margin-toggle">&#8853;</label>:
<input type="checkbox" id="mn-no_prefix" class="margin-toggle"/>
<span class="marginnote">
  In ns.erl, no &ldquo;server1:&rdquo; prefix is needed for the rpc calls
  because of the import statement
  &ldquo;import(server1, [rpc/2]).&rdquo;   
  When you specify a function in an import statement,
  you can refer to it as it is were a local function.
</span>
<pre class="code with-wrapping fullwidth">
<line>add(Name, Place) -></line>
<line>    gen_server:call(ns, {add, Name, Place}).</line>
<line></line>
<line>find(Name) -> gen_server:call(ns, {find, Name}).</line>
<line></line>
</pre>


	<h3>The specific code exports callbacks used by generic server.</h3>

	<p>This example:
    <pre class="code with-wrapping fullwidth">
<line>-export([&hellip;, handle/2, init/0]).</line>
</pre>

	<p>With gen_server:
    <pre class="code with-wrapping fullwidth">
<line>-export([&hellip;, handle_call/3, init/1]).</line>
</pre>


	<h3>The specific code implements the callbacks.</h3>

	<p>This example:
    <pre class="code with-wrapping fullwidth">
<line>init() -> dict:new().</line>
<line></line>
<line>handle({add, Name, Place}, Dict) -></line>
<line>    {ok, dict:store(Name, Place, Dict)};</line>
<line>handle({find, Name}, Dict) -></line>
<line>    {dict:find(Name, Dict), Dict}.</line>
</pre>

	<p>With gen_server:
    <pre class="code with-wrapping fullwidth">
<line>init(_Args) -> {ok, dict:new()}.</line>
<line></line>
<line>handle_call({add, Name, Place}, _From, Dict) -></line>
<line>    {reply, ok, dict:store(Name, Place, Dict)};</line>
<line>handle_call({find, Name}, _From, Dict) -></line>
<line>    {reply, dict:find(Name, Dict), Dict}.</line>
</pre>



	<p>This does not cover all aspects of OTP behaviors (handling asynchronous messages, starting) but those are minor details when compared to the core pattern of api-forwarder/handler-callback described here.


</section>

<section>

    <h2>Message sequence chart resources</h2>

        <p>In case you are curious about message sequence charts, I learned about them from a post by Joe Armstrong on the Erlang questions mailing list:

        <blockquote>
            <p>Erlang is all about sending messages to things, so message sequence charts (<a href="https://en.wikipedia.org/wiki/Message_sequence_chart">https://en.wikipedia.org/wiki/Message_sequence_chart</a>) are brilliant for describing how Erlang programs work.
            <footer><cite><a href="http://erlang.org/pipermail/erlang-questions/2016-April/089009.html">[erlang-questions] Rhetorical structure of code: Anyone interested in collaborating?</a></cite></footer>
        </blockquote>

        <ul>
            <li>I used the LaTex macro package, documentation is <a href="http://satoss.uni.lu/software/mscpackage/manual.pdf">here</a>.</li>
            <li>A message sequence tutorial is <a href="http://www.sdl-forum.org/MSC/msctutorial.pdf">here</a>.</li>
            <li>The spec is <a href="https://www.itu.int/rec/T-REC-Z.120-201102-I/en">here</a>.</li>
        </ul>

</section>

<section>
   <h2>Change Log</h2>

   <h3>Sep. 14, 2016</h3>
   <ul>
   <li>Add link to today&rsquo;s blog entry on gen_event.</li>
   </ul>

   <h3>Aug. 17, 2016</h3>
   <ul>
   <li>Rewrote lede.</li>
   <li>Fixed typo in message sequence chart heading.</li>
   <li>Added book title and link to <em>A plug for the Programming Erlang book.</em> section, fixed a spelling error, and wordsmithed the text a little.</li>
   <li>Fixed indentation in ns.erl.</li>
   <li>Moved instructions for reading a message sequence chart into a margin note.</li>
   <li>Changed the contents of all second-level headings.</li>
   <li>Added <em>How does this relate to OTP behaviors</em> section.</li>
   <li>Add link to Joe Armstrong&rsquo;s favorite Erlang program blog entry.</li>
   </ul>

   <h3>Sep. 1, 2016</h3>
   <ul>
   <li>Added margin note explaining why there is no &ldquo;server1:&rdquo; 
   qualifier on the rpc calls in ns.erl.</li>
   <ul>
</section>
