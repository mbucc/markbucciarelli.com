<!--
How to Build Snap with Stack
March 7, 2017
haskell, stack
-->
    <section>
    
        <p>I prefer Stack&rsquo;s focus on repeatable builds, but Snap (a Haskell web framework) doesn't give any instructions for how to build with Stack.  Here's how.
    
    	<figure>
        <img src='/img/full/snap.png' alt='A close up picture of a snap.' class='webfeedsFeaturedVisual'/>
    	<figcaption>
           &copy; 2007 <a href='/imginfo/snap.html'>Beatrice Allée</a>
    	  for Wikimedia Commons
    	</figcaption>
    	</figure>
    
    </section>
    <section>
    
    <p>Tools used in this tutorial:
    
    <ol>
        <li><a href='https://docs.haskellstack.org/en/stable/README/'>Stack</a> 1.3.2, Git revision 3f675146590d</li>
        <li><a href='http://snapframework.com/download'>Snap</a>, retrieved Jan 25, 2017</li>
    </ol>
    
    <p>All code for this blog entry can be found on <a href="https://github.com/mbucc/markbucciarelli.com/tree/master/sandbox/snap-stack">github</a>.
    
    <h2>Create initial Snap project with snap init.</h2>
    
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ cd sandbox/snap-stack</line>
    <line>$ snap init barebones</line>
    <line>$ tree</line>
    <line>.</line>
    <line>├── log</line>
    <line>│   └── placeholder</line>
    <line>├── snap-stack.cabal</line>
    <line>└── src</line>
    <line>    └── Main.hs</line>
    <line></line>
    <line>2 directories, 3 files</line>
    <line>$</line>
    </pre>
    
    <p>This creates the Snap hello world app, which is described in detail in the <a href="http://snapframework.com/docs/tutorials/snap-api">Snap API Introduction.</a>
    
    </section>
    
    
    <section>
    
    <h2>Use Snap&rsquo;s cabal configuration to initialize Stack.</h2>
    
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ stack init</line>
    <line>Looking for .cabal or package.yaml files to use to init the project.</line>
    <line>Using cabal packages:</line>
    <line>- snap-stack.cabal</line>
    <line></line>
    <line>Selecting the best among 10 snapshots&hellip;</line>
    <line></line>
    <line>Downloaded lts-8.4 build plan.</line>
    <line>Fetching package index &hellip;remote: Counting objects: 2259, done.</line>
    <line>remote: Compressing objects: 100% (98/98), done.</line>
    <line>remote: Total 2259 (delta 810), reused 785 (delta 785), pack-reused 1369</line>
    <line>Receiving objects: 100% (2259/2259), 1.92 MiB | 359.00 KiB/s, done.</line>
    <line>Resolving deltas: 100% (906/906), completed with 374 local objects.</line>
    <line>From https://github.com/commercialhaskell/all-cabal-hashes</line>
    <line>   93b8c00..98d707f  hackage    -> origin/hackage</line>
    <line> - [tag update]      current-hackage -> current-hackage</line>
    <line>Fetched package index.</line>
    <line>Populated index cache.</line>
    <line>* Matches lts-8.4</line>
    <line></line>
    <line>Selected resolver: lts-8.4</line>
    <line>Initializing configuration using resolver: lts-8.4</line>
    <line>Total number of user packages considered: 1</line>
    <line>Writing configuration to file: stack.yaml</line>
    <line>All done.</line>
    <line>$</line>
    </pre>
    
    <p>Stack looks at the dependencies <code>.cabal</code> (created by Snap) and 
    tries<label for='mn-demo' class='margin-toggle'>&#8853;</label>
    <input type="checkbox" id="mn-demo" class="margin-toggle"/>
    <span class="marginnote">
    If it can&rsquo;t find an LTS snapshot, it will try a nightly snapshot.
    </span>
    to find a long-term support stackage snapshot that satisfies these dependencies. 
    In this case, it picked <a href='https://www.stackage.org/lts-8.4'>LTS 8.4,</a> a
    set of 2,220 packages that was published yesterday.
    
    </section>
    
    <section>
    <h2>Install the Haskell compiler.</h2>
    
    <p>For Stack, repeatable builds mean the compiler must be the same as well as the
    package set.  If you try to build, and don&rsquo;t have the correct compiler already installed by Stack, you get this output:
    
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ stack build</line>
    <line>No compiler found, expected minor version match with ghc-8.0.2 (x86_64) (based on resolver setting in /Users/mark/src/markbucciarelli.com/sandbox/snap-stack/stack.yaml).</line>
    <line>To install the correct GHC into /Users/mark/.stack/programs/x86_64-osx/, try running "stack setup" or use the "--install-ghc" flag.</line>
    <line>$</line>
    </pre>
    
    <p>
    LTS 8.4<label for='mn-ghc' class='margin-toggle'>&#8853;</label>
    <input type="checkbox" id="mn-ghc" class="margin-toggle"/>
    <span class="marginnote">
    I think stackage was having server load issues; the first seven times I tried running stack setup it hung on the download. I finally got it after waiting until the next morning.
    </span>
    goes with compiler ghc-8.0.2 and I don&rsquo;t have it installed, so use <code>stack setup</code> to 
    install.
    
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ stack setup</line>
    <line>Preparing to install GHC to an isolated location.</line>
    <line>This will not interfere with any system-level installation.</line>
    <line>Downloaded ghc-8.0.2.</line>
    <line>Installed GHC.</line>
    <line>stack will use a sandboxed GHC it installed</line>
    <line>For more information on paths, see &rsquo;stack path&rsquo; and &rsquo;stack exec env&rsquo;</line>
    <line>To use this GHC and packages outside of a project, consider using:</line>
    <line>stack ghc, stack ghci, stack runghc, or stack exec</line>
    <line>$</line>
    <line></line>
    </pre>
    
    <p>Note that ghc is not installed on your path, to run the interpreter, you must run <code>stack ghci</code>.
    
    </section>
    
    <section>
    
    <h2>Confirm the project builds with Stack.</h2>
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ stack build</line>
    <line>[1 of 2] Compiling Main             ( /Users/mark/.stack/setup-exe-src/setup-mPHDZzAJ.hs, /Users/mark/.stack/setup-exe-src/setup-mPHDZzAJ.o )</line>
    <line>[2 of 2] Compiling StackSetupShim   ( /Users/mark/.stack/setup-exe-src/setup-shim-mPHDZzAJ.hs, /Users/mark/.stack/setup-exe-src/setup-shim-mPHDZzAJ.o )</line>
    <line>Linking /Users/mark/.stack/setup-exe-cache/x86_64-osx/tmp-Cabal-simple_mPHDZzAJ_1.24.2.0_ghc-8.0.2 &hellip;</line>
    <line>bytestring-builder-0.10.8.1.0: configure</line>
    <line>call-stack-0.1.0: download</line>
    <line>integer-logarithms-1.0.1: download</line>
    <line>bytestring-builder-0.10.8.1.0: build</line>
    <line>network-2.6.3.1: configure</line>
    <line>bytestring-builder-0.10.8.1.0: copy/register</line>
    <line>network-2.6.3.1: build</line>
    <line>primitive-0.6.1.0: configure</line>
    <line>primitive-0.6.1.0: build</line>
    <line>mtl-2.2.1: configure</line>
    <line>mtl-2.2.1: build</line>
    <line>old-locale-1.0.0.7: configure</line>
    <line>old-locale-1.0.0.7: build</line>
    <line>clock-0.7.2: configure</line>
    <line>clock-0.7.2: build</line>
    <line>call-stack-0.1.0: configure</line>
    <line>old-locale-1.0.0.7: copy/register</line>
    <line>[&hellip; deleted 100 lines &hellip;]</line>
    <line>Completed 34 action(s).</line>
    <line>$</line>
    </pre>
    
    <p>Success!
    
    </section>
    
    <section>
    <h2>Convert project to use a standard Stack directory structure.</h2>
    
    <p>Stack organizes your sources into libraries, test specs and application sources.
    
    <h3>Create an empty Stack project in the sub directory <code>tmp</code>.</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ stack new tmp</line>
    <line>Downloading template "new-template" to create project "tmp" in tmp/ &hellip;</line>
    <line></line>
    <line>The following parameters were needed by the template but not provided: author-email, author-name, category, copyright, github-username</line>
    <line>You can provide them in /Users/mark/.stack/config.yaml, like this:</line>
    <line>templates:</line>
    <line>  params:</line>
    <line>    author-email: value</line>
    <line>    author-name: value</line>
    <line>    category: value</line>
    <line>    copyright: value</line>
    <line>    github-username: value</line>
    <line>Or you can pass each one as parameters like this:</line>
    <line>stack new tmp new-template -p "author-email:value" -p "author-name:value" -p "category:value" -p "copyright:value" -p "github-username:value"</line>
    <line></line>
    <line>Looking for .cabal or package.yaml files to use to init the project.</line>
    <line>Using cabal packages:</line>
    <line>- tmp/tmp.cabal</line>
    <line></line>
    <line>Selecting the best among 10 snapshots&hellip;</line>
    <line></line>
    <line>* Matches lts-8.4</line>
    <line></line>
    <line>Selected resolver: lts-8.4</line>
    <line>Initialising configuration using resolver: lts-8.4</line>
    <line>Total number of user packages considered: 1</line>
    <line>Writing configuration to file: tmp/stack.yaml</line>
    <line>All done.</line>
    <line>$ cd tmp</line>
    </pre>
    
    <p>The standard Stack directories:
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ tree tmp</line>
    <line>tmp</line>
    <line>├── LICENSE</line>
    <line>├── Setup.hs</line>
    <line>├── app</line>
    <line>│   └── Main.hs</line>
    <line>├── src</line>
    <line>│   └── Lib.hs</line>
    <line>├── stack.yaml</line>
    <line>├── test</line>
    <line>│   └── Spec.hs</line>
    <line>└── tmp.cabal</line>
    <line></line>
    <line>3 directories, 7 files</line>
    <line>$</line>
    </pre>
    
    <p>No change in <code>stack.yaml</code>:
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ diff stack.yaml tmp/stack.yaml</line>
    <line>$</line>
    </pre>
    
    <h3>Move directories around.</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ mv src app</line>
    <line>$ mv tmp/src .</line>
    <line>$ mv tmp/test .</line>
    </pre>
    
    <h3>Update cabal file.</h3>
    
    <p>The Stack one is bigger, so start with that.
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ ls -l snap-stack.cabal</line>
    <line>-rw-r--r--  1 mark  staff  960 Mar  7 21:44 snap-stack.cabal</line>
    <line>$ ls -l tmp/tmp.cabal</line>
    <line>-rw-r--r--  1 mark  staff  1158 Mar  8 06:13 tmp/tmp.cabal</line>
    </pre>
    
    <p>Copy:
    
    <ol>
    <li><code>tmp.cabal</code> to <code>tmp.cabal.orig</code></li>
    <li><code>snap-stack.cabal</code> to <code>snap-stack.cabal.orig</code></li>
    </ol>
    
    <p>and then make the following changes to <code>snap-stack.cabal</code>:
    
    <ol>
    <li>add dependencies from <code>tmp/tmp.cabal</code> to <code>snap-stack.cabal</code></li>
    <li>globally replace <code>tmp</code> with <code>snap-stack</code></li>
    <li>delete reference to <code>README.md</code> (or create the file)</li>
    <li>delete reference to <code>LICENSE</code> (or create the file)</li>
    </ol>
    
    <p>We end up with the following diff:
    
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ diff -uw tmp/tmp.cabal.orig snap-stack.cabal</line>
    <line>&mdash; tmp/tmp.cabal.orig    2017-03-08 06:41:24.000000000 -0500</line>
    <line>+++ snap-stack.cabal    2017-03-08 06:59:30.000000000 -0500</line>
    <line>@@ -1,16 +1,14 @@</line>
    <line>-name:                tmp</line>
    <line>+name:                snap-stack</line>
    <line> version:             0.1.0.0</line>
    <line> -- synopsis:</line>
    <line> -- description:</line>
    <line>-homepage:            https://github.com/githubuser/tmp#readme</line>
    <line>+homepage:            https://github.com/githubuser/snap-stack#readme</line>
    <line> license:             BSD3</line>
    <line>-license-file:        LICENSE</line>
    <line> author:              Author name here</line>
    <line> maintainer:          example@example.com</line>
    <line> copyright:           2017 Author name here</line>
    <line> category:            Web</line>
    <line> build-type:          Simple</line>
    <line>-extra-source-files:  README.md</line>
    <line> cabal-version:       >=1.10</line>
    <line></line>
    <line> library</line>
    <line>@@ -19,23 +17,28 @@</line>
    <line>   build-depends:       base >= 4.7 && < 5</line>
    <line>   default-language:    Haskell2010</line>
    <line></line>
    <line>-executable tmp-exe</line>
    <line>+executable snap-stack-exe</line>
    <line>   hs-source-dirs:      app</line>
    <line>   main-is:             Main.hs</line>
    <line>   ghc-options:         -threaded -rtsopts -with-rtsopts=-N</line>
    <line>   build-depends:       base</line>
    <line>-                     , tmp</line>
    <line>+                     , snap-stack</line>
    <line>+                     , bytestring                >= 0.9.1 && < 0.11</line>
    <line>+                     , monad-control             >= 1.0   && < 1.1</line>
    <line>+                     , mtl                       >= 2     && < 3</line>
    <line>+                     , snap-core                 >= 1.0   && < 1.1</line>
    <line>+                     , snap-server               >= 1.0   && < 1.1</line>
    <line>   default-language:    Haskell2010</line>
    <line></line>
    <line>-test-suite tmp-test</line>
    <line>+test-suite snap-stack-test</line>
    <line>   type:                exitcode-stdio-1.0</line>
    <line>   hs-source-dirs:      test</line>
    <line>   main-is:             Spec.hs</line>
    <line>   build-depends:       base</line>
    <line>-                     , tmp</line>
    <line>+                     , snap-stack</line>
    <line>   ghc-options:         -threaded -rtsopts -with-rtsopts=-N</line>
    <line>   default-language:    Haskell2010</line>
    <line></line>
    <line> source-repository head</line>
    <line>   type:     git</line>
    <line>-  location: https://github.com/githubuser/tmp</line>
    <line>+  location: https://github.com/githubuser/snap-stack</line>
    </pre>
    
    </section>
    
    <section>
    <h2>Run web server</h2>
    
    <p>Start web server on localhost &hellip;
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ stack exec snap-stack</line>
    <line>no port specified, defaulting to port 8000</line>
    <line>Listening on http://0.0.0.0:8000</line>
    </pre>
    
    <p>&hellip; and test.
    
    <!-- vi: .,/<\/pre/-1 s;.*;<line>&</line>;   -->
            <pre class='code with-wrapping fullwidth'>
    <line>$ curl localhost:8000</line>
    <line>hello world~$</line>
    </pre>
    
    
    
    
    
    </section>
