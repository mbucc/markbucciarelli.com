<!--
My first Erlang patch
July 20, 2016
erlang
-->
    <section>
    
        <p>Example of how you can contribute to Erlang by fixing a bug and having the fix committed to the Erlang source tree.
    
    	<figure>
        <img src='/img/full/redbug.png' alt='Closeup of bright red bug on deep green leaf. class='webfeedsFeaturedVisual'/>
    	<figcaption>
           &copy; 2016 <a href='/imginfo/redbug.html'>Ritchie Valens</a>
    	  for Unsplash
    	</figcaption>
    	</figure>
    
    </section>
    
    <section>
    
        <h2>Finding the bug.</h2>
    
            <p>I&rsquo;ve written a wrapper around Erlang&rsquo;s <a href='http://erlang.org/doc/man/erl_tidy.html'>erl_tidy</a> module that reads stdin and writes the formatted result to stdout<label for='sn1' class='margin-toggle sidenote-number'></label>.  <input type='checkbox' id='sn1' class='margin-toggle'/> <span class='sidenote'>While learning Go, I got used to gofmt and wanted the same tool for Erlang.</span> When I used my <a href='https://github.com/mbucc/erlfmt'>erlfmt</a> utility on some Erlang code I was writing, it failed.
    
            <p>I cut the input down until I found a small input that would trigger the crash:
    
            <pre><code>
    $ cat t.erl
    -module(t).
    
    -export([start/0]).
    
    start() -> io:put_chars(\"~\").
    $
    </code></pre>
    
    </section>
    
    <section>
    
        <h2>Fixing the bug.</h2>
    
            <h3>The error was badarg on line 299.</h3>
    
                <pre><code>
    ** exception exit: badarg
         in function  erl_tidy:file/2 (erl_tidy.erl, line 299)
    </code></pre>
    
            <h3>What is on line 299?</h3>
    
                <p>Line 299 in erl_tidy.erl exits and outputs the error reason returned by the child process.
    
                <pre><code>
    $ (cd $HOME/src ; git clone https://github.com/erlang/otp.git)
    $ vi \$(find $HOME/src/otp -name erl_tidy.erl)
    &hellip;
     292 file(Name, Opts) ->
     293     Parent = self(),
     294     Child = spawn_link(fun () -> file_1(Parent, Name, Opts) end),
     295     receive
     296         {Child, ok} ->
     297             ok;
     298         {Child, {error, Reason}} ->
     299             exit(Reason)
     300     end.
    </code></pre>
    
            <h3>Copy erl_tidy module locally and verify same error.</h3>
    
                <p>I copied it locally so I could edit the file &hellip;
    
                <pre><code>
    $ cp \$(find $HOME/src/otp -name erl_tidy.erl) .
    $ cp erl_tidy.erl erl_tidy.orig
    </code></pre>
    
                <p>&hellip; and started by verifying that my local copy gave the same error.
    
                <pre><code>
    $ erl
    Erlang/OTP 19 [erts-8.0.1] [source-ca40008] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]
    
    Eshell V8.0.1  (abort with ^G)
    1> c(erl_tidy).
    {ok,erl_tidy}
    2> erl_tidy:file(\"t.erl\", [{stdout,true}]).
    ** exception exit: badarg
         in function  erl_tidy:file/2 (erl_tidy.erl, line 299)
    3>
    </code></pre>
    
    
            <h3>Figure out which line of client code is generating the error.</h3>
    
                <p>Since the error is passed back from a spawned process to the parent process, we don&rsquo;t know the line of client code that has the problem.  So, I sprinkled some io:put_char() statements to figure out where it crashes.
    
                <p>I knew it was related to the {stdout,true} argument since I could tidy the file without error if I did not use that option.  That helped me narrow down where to put the debug statements.
    
                <pre><code>
    $ vi erl_tidy.erl
    &hellip;
    $ diff -uw erl_tidy.orig erl_tidy.erl | grep -n ^
    1:&mdash; erl_tidy.orig    2016-07-16 09:11:41.000000000 -0400
    2:+++ erl_tidy.erl    2016-07-16 11:14:58.000000000 -0400
    3:@@ -300,6 +300,7 @@
    4:     end.
    5: 
    6: file_1(Parent, Name, Opts) ->
    7:+    io:put_chars(\"MKB: enter file_1\n\"),
    8:     try file_2(Name, Opts) of
    9:     _ ->
    10:         Parent ! {self(), ok}
    11:@@ -311,6 +312,7 @@
    12:     end.
    13: 
    14: file_2(Name, Opts) ->
    15:+    io:put_chars(\"MKB: enter file_2\n\"),
    16:     Opts1 = Opts ++ file__defaults(),
    17:     Forms = read_module(Name, Opts1),
    18:     Comments = erl_comment_scan:file(Name),
    19:@@ -417,7 +419,9 @@
    20:     end.
    21: 
    22: print_module(Tree, Opts) ->
    23:+     io:put_chars(\"MKB: print_module - 1\n\"),
    24:     Printer = proplists:get_value(printer, Opts),
    25:+     io:put_chars(\"MKB: print_module - 2\n\"),
    26:     io:format(Printer(Tree, Opts)).
    27: 
    28: output(FD, Printer, Tree, Opts) ->
    </code></pre>
    
            <h3>Run the instrumented code to see how far it gets.</h3>
    
                <pre><code>
    $ erl
    Erlang/OTP 19 [erts-8.0.1] [source-ca40008] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]
    
    Eshell V8.0.1  (abort with ^G)
    1> c(erl_tidy).
    {ok,erl_tidy}
    2> erl_tidy:file(\"t.erl\", [{stdout,true}]).
    MKB: enter file_1
    MKB: enter file_2
    MKB: print_module - 1
    MKB: print_module - 2
    ** exception exit: badarg
         in function  erl_tidy:file/2 (erl_tidy.erl, line 299)
    3>
    </code></pre>
    
    
                <p>The program outputs 'MKB: print_module - 2' and then raises the error, so the next line is the culprit:
    
                <pre><code>
    26:     io:format(Printer(Tree, Opts)).
    </code></pre>
    
            <h3>Is it io:format() or Printer()?</h3>
    
                <p>There are two calls on that line, so unwind them and insert another io:put_chars:<label for='sn3' class='margin-toggle sidenote-number'></label> <input type='checkbox' id='sn3' class='margin-toggle'/> <span class='sidenote'>Line numbers here are of erl_tidy.</span>
    
                <pre><code>
     421 print_module(Tree, Opts) ->
     422     io:put_chars(\"MKB: print_module - 1\n\"),
     423     Printer = proplists:get_value(printer, Opts),
     424     io:put_chars(\"MKB: print_module - 2\n\"),
     425     Text = Printer(Tree, Opts), 
     426     io:format(\"MKB: print_module - 3: Text = ~p\n\", [Text]),
     427     io:format(Text).
    </code></pre>
    
                <p>When I run this, the output changes: lines 425 and 426 execute successfully, so the problem must be on line 427 in the io:format() call.
    
                <pre><code>
    $ erl
    Erlang/OTP 19 [erts-8.0.1] [source-ca40008] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]
    
    Eshell V8.0.1  (abort with ^G)
    1> c(erl_tidy).
    {ok,erl_tidy}
    2> erl_tidy:file(\"t.erl\", [{stdout,true}]).
    MKB: enter file_1
    MKB: enter file_2
    MKB: print_module - 1
    MKB: print_module - 2
    MKB: print_module - 3: Text = \"-module(t).\n\n-export([start/0]).\n\nstart() -> io:put_chars(\\"~\\").\"
    ** exception exit: badarg
         in function  erl_tidy:file/2 (erl_tidy.erl, line 299)
    3>
    </code></pre>
    
    
            <h3>The fix.</h3>
    
                <p>After some staring  at the 'print_module - 3' line above, the problem is clear.  The tilde character is the format identifier character in Erlang, as the percent character is in C.
    
                <p>The problem can be duplicated most concisely in the console like this:
    
                <pre><code>
    4> io:format(\"~\").                                                                    
    ** exception error: bad argument
         in function  io:format/3
            called as io:format(<0.50.0>,\"~\",[])
    5> 
    </code></pre>
    
                <p>Since the intent is to print a string, changing io:format() to io:put_chars() fixes the bug.
    
    </section>
    
    <section>
    
        <h2>Committing the fix to the Erlang source tree.</h2>
    
            <h3>Erlang uses the normal github process for pull requests.</h3>
    
                <p>The Erlang team provides a well-written set of instructions on <a href='https://github.com/erlang/otp/wiki/contribution-guidelines'>how to submit a patch</a>.
                <p>It&rsquo;s pretty much the normal github flow, with a couple wrinkles:
                <ol>
                    <li>use git config to setup your name and email</li>
                    <li>for bug fixes, patch the maint branch</li>
                    <li>test first</li>
                    <li><a href='https://github.com/erlang/otp/wiki/Writing-good-commit-messages'>write a good commit message</a></li>
                    <li><a href='https://github.com/erlang/otp/wiki/Refining-patches-using-git'>clean up your patch</a> before submitting pull request</li>
                </ol>
    
            <h3>Building Erlang and running the syntax_tools test suite.</h3>
    
                <p>Again, great docs: <a href='https://github.com/erlang/otp/blob/maint/HOWTO/INSTALL.md'>INSTALL.md</a> and <a href='https://github.com/erlang/otp/blob/maint/HOWTO/TESTING.md'>TESTING.md</a>.
    
                <pre><code>
    $ git clone git@github.com:mbucc/otp.git
    $ cd otp
    $ export ERL_TOP=&lsquo;pwd&lsquo;
    $ ./otp_build autoconf  # (6s)
    $ ./otp_build setup -a  # (11m)
    $ export PATH=&lsquo;pwd&lsquo;/bin:$PATH
    $ ./otp_build tests     # (1m)
    $ cd lib/syntax_tools/
    $ ct_run -pa ../../release/tests/test_server/ -suite ./test/syntax_tools_SUITE
    Erlang/OTP 19 [erts-8.0.1] [source-ca40008] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]
    
    Converting \"../../release/tests/test_server\" to \"/Users/mark/src/otp/release/tests/test_server\" and re-inserting with add_patha/1
    
    
    Common Test starting (cwd is /Users/mark/src/otp/lib/syntax_tools)
    
    Eshell V8.0.1  (abort with ^G)
    (ct@marks-mbp-3)1> 
    Common Test: Running make in test directories&hellip;
    Recompile: syntax_tools_SUITE
    
    CWD set to: \"/Users/mark/src/otp/lib/syntax_tools/ct_run.ct@marks-mbp-3.2016-07-19_07.24.34\"
    
    TEST INFO: 1 test(s), 11 case(s) in 1 suite(s)
    
    Testing lib.syntax_tools.syntax_tools_SUITE: Starting test, 11 test cases
    Testing lib.syntax_tools.syntax_tools_SUITE: TEST COMPLETE, 11 ok, 0 failed of 11 test cases
    
    Updating /Users/mark/src/otp/lib/syntax_tools/index.html &hellip; done
    Updating /Users/mark/src/otp/lib/syntax_tools/all_runs.html &hellip; done
    
    $
    </code></pre>
        
            <h3>However, this is not the way they tell you to do it!</h3>
    
                <p>The TESTING.md instructions say to use the ts() module.  However, that approach does not notice and recompile changed files.  The ct_run approach above does.
    
                <p>If you do use the ts() module, and you are on OSX, use the 'batch' option so XQuartz doesn&rsquo;t open; for example,
    
                <pre><code>
    1> ts:run(syntax_tools, syntax_tools_SUITE, [batch]).
    </code></pre>
    
                <p>or
    
                <pre><code>
    1> ts:run(syntax_tools, syntax_tools_SUITE, t_erl_tidy, [verbose, batch]).
    </code></pre>
    
    
    </section>
    
    <section>
    
        <h2>Final notes</h2>
    
            <p>The pull request is <a href='https://github.com/erlang/otp/pull/1071'>https://github.com/erlang/otp/pull/1071</a> and the resulting commit is <a href='https://github.com/erlang/otp/commit/0969ecad9e2978bacb7b27f663cd16aa5ea6c460'>https://github.com/erlang/otp/commit/0969ecad9e2978bacb7b27f663cd16aa5ea6c460</a>.  Note that in this case, I was too slow with the git squash (aka rebase) and <a href='https://github.com/uabboli'>Hans Bolinder</a> did it for me.
    
            <p>It took less that a month to get committed, and that was delayed because the Erlang team was in the middle of a release.
    
    </section>
