<article>
    <h1>A Simple Erlang Application</h1>
    <p class=subtitle>November 9, 2016
    <label for=blog-title class=margin-toggle>&#8853;</label>
    <input type=checkbox id=blog-title class=margin-toggle />
    <span class=marginnote id=blogtags>Tags:
        <a href=/tags.html#erlang>erlang</a>
    </span>

</p>
    <section>
    
        <p>An HTTP server structured as an Erlang application.  Built with Elli, it uses ERL_LIBS and make instead of rebar.
    
    	<figure>
        <img src='/img/full/service.png' alt='Luminous box with the word service on it in block capitals.' class='webfeedsFeaturedVisual'/>
    	<figcaption>
           &copy; 2016 <a href='/imginfo/service.html'>Mike Wilson</a>
    	  for Unsplash
    	</figcaption>
    	</figure>
    
    </section>
    <section>
    
    <h2>The Code</h2>
    
    <h3>Directory Structure</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>.</line>
    <line>├── Makefile</line>
    <line>├── ebin</line>
    <line>└── src</line>
    <line>    ├── erlsrv.app.src</line>
    <line>    ├── erlsrv.erl</line>
    <line>    ├── es_callback.erl</line>
    <line>    └── es_sup.erl</line>
    </pre>
    
    <p>The Erlang <a href="http://erlang.org/doc/design_principles/applications.html">documentation</a> mentions four directories (src, ebin, priv and include) but the application started fine with just two.
    
    <h3>Makefile</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>all: ebin/es_sup.beam ebin/es_callback.beam ebin/erlsrv.app ebin/erlsrv.beam</line>
    <line></line>
    <line>ELLI=${HOME}/src/elli</line>
    <line>${ELLI}/ebin:</line>
    <line>	(cd ${ELLI} ; make)</line>
    <line></line>
    <line>ebin/%.beam: src/%.erl ${ELLI}/ebin</line>
    <line>	ERL_LIBS=${ELLI} erlc -o ebin/ $<</line>
    <line></line>
    <line>ebin/erlsrv.app: src/erlsrv.app.src</line>
    <line>	cp $? $@</line>
    <line></line>
    <line>.PHONY: clean</line>
    <line>clean:</line>
    <line>	rm -f ebin/*</line>
    </pre>
    
    <p><code>ERL_LIBS</code> makes this work.  I cloned the <a href="https://github.com/knutin/elli">Elli</a> repository under <code>$HOME/src</code> and set <code>ERL_LIBS</code> to that before calling <code>erlc</code>.  A simple way to manage dependencies that is built in to Erlang.
    
    
            <blockquote>
    
    <p>Environment variable ERL_LIBS (defined in the operating system) can be used to define more library directories to be handled in the same way as the standard OTP library directory described above, except that directories without an ebin directory are ignored.
    
    <p>All application directories found in the additional directories appears before the standard OTP applications, except for the Kernel and STDLIB applications, which are placed before any additional applications. In other words, modules found in any of the additional library directories override modules with the same name in OTP, except for modules in Kernel and STDLIB.
    
    <p>Environment variable ERL_LIBS (if defined) is to contain a colon-separated (for Unix-like systems) or semicolon-separated (for Windows) list of additional libraries.
    
                <footer>Ericsson AB. <cite><a href='http://erlang.org/doc/man/code.html'>erlang.org code</a></cite> (retrieved November 6, 2016)</footer>
            </blockquote>
    
    <h3>src/erlsrv.app.src</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>{application, erlsrv, [{mod, {erlsrv,[]}}]}.</line>
    </pre>
    
    <p>The smallest possible application configuration file.
    
    <h3>src/erlsrv.erl</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>-module(erlsrv).</line>
    <line>-behavior(application).</line>
    <line></line>
    <line>-export([start/2, stop/1]).</line>
    <line></line>
    <line>start(_Type, _Args) -> es_sup:start_link().</line>
    <line></line>
    <line>stop(_State) -> ok.</line>
    </pre>
    
    <p>The job of the application behavior is to start the main supervisor.
    
    
    <h3>src/es_callback.erl</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>-module(es_callback).</line>
    <line>-export([handle/2, handle_event/3]).</line>
    <line></line>
    <line>-include_lib("elli/include/elli.hrl").</line>
    <line>-behaviour(elli_handler).</line>
    <line></line>
    <line>% Dispatch to handler functions</line>
    <line>handle(Req, _Args) -></line>
    <line>    handle(Req#req.method, elli_request:path(Req), Req).</line>
    <line></line>
    <line>handle(&rsquo;GET&rsquo;,[<<"hello">>, <<"world">>], _Req) -></line>
    <line>    {ok, [], <<"Hello World!">>};</line>
    <line></line>
    <line>handle(_, _, _Req) -></line>
    <line>    {404, [], <<"Not Found">>}.</line>
    <line></line>
    <line>%% @doc: Handle request events, like request completed, exception</line>
    <line>%% thrown, client timeout, etc. Must return &rsquo;ok&rsquo;.</line>
    <line>handle_event(_Event, _Data, _Args) -></line>
    <line>    ok.</line>
    </pre>
    
    <p>Dispatch HTTP calls to handlers.  Elli spawns a process for each request so they are isolated from each other.
    <p>This is the file that will grow as I build a server that does something.
    
    
    <h3>src/es_sup.erl</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>-module(es_sup).</line>
    <line>-behaviour(supervisor).</line>
    <line>-export([start_link/0]).</line>
    <line>-export([init/1]).</line>
    <line></line>
    <line>start_link() -></line>
    <line>    supervisor:start_link({local, ?MODULE}, ?MODULE, []).</line>
    <line></line>
    <line>init([]) -></line>
    <line>    ElliOpts = [{callback, es_callback}, {port, 3000}],</line>
    <line>    ElliSpec = {</line>
    <line>        es_http,</line>
    <line>        {elli, start_link, [ElliOpts]},</line>
    <line>        permanent,</line>
    <line>        5000,</line>
    <line>        worker,</line>
    <line>        [elli]},</line>
    <line></line>
    <line>    {ok, { {one_for_one, 5, 10}, [ElliSpec]} }.</line>
    </pre>
    
    <p>The supervisor for Elli.  Copied right from Elli&rsquo;s <a href="https://github.com/knutin/elli">github readme</a>.
    
    <h2>Running the application</h2>
    
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ ERL_LIBS=$HOME/src/elli erl -pa ebin</line>
    <line>Erlang/OTP 19 [erts-8.0.1] [source-ca40008] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]</line>
    <line></line>
    <line>Eshell V8.0.1  (abort with ^G)</line>
    <line>1> application:start(erlsrv).</line>
    <line>ok</line>
    <line>2></line>
    </pre>
    
    <p>Note the use of ERL_LIBS when starting interpreter.
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ curl -v http://127.0.0.1:3000/hello/world</line>
    <line>*   Trying 127.0.0.1&hellip;</line>
    <line>* Connected to 127.0.0.1 (127.0.0.1) port 3000 (#0)</line>
    <line>> GET /hello/world HTTP/1.1</line>
    <line>> Host: 127.0.0.1:3000</line>
    <line>> User-Agent: curl/7.49.1</line>
    <line>> Accept: */*</line>
    <line>> </line>
    <line>< HTTP/1.1 200 OK</line>
    <line>< Connection: Keep-Alive</line>
    <line>< Content-Length: 12</line>
    <line>< </line>
    <line>* Connection #0 to host 127.0.0.1 left intact</line>
    <line>Hello World!$</line>
    </pre>
    
    <h2>Notes</h2>
    
    <h3>My Goals</h3>
    <ol>
    <li>simplest code possible</li>
    <li>take my time and understand each step</li>
    <li>support SSL</li>
    <li>support basic auth</li>
    </ol>
    
    <h3>Why no rebar?</h3>
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ cd $HOME/src/rebar3/</line>
    <line>$ du -sh src</line>
    <line>692K	src</line>
    <line>$ </line>
    </pre>
    
    <p>Violates goal #1.
    
    <h3>Surprising behavior when no mod in application configuration file.</h3>
    
    <p>Don&rsquo;t leave out the <code>mod</code> parameter in the app configuration file.
    
    <p>For example, if I change the config file to:
    
            <pre class='code with-wrapping fullwidth'>
    <line>{application, erlsrv, []}.</line>
    </pre>
    
    <p>I can start the application without error
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ ERL_LIBS=$HOME/src/elll erl -pa ebin</line>
    <line>Erlang/OTP 19 [erts-8.0.1] [source-ca40008] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]</line>
    <line></line>
    <line>Eshell V8.0.1  (abort with ^G)</line>
    <line>1> application:start(erlsrv).</line>
    <line>ok</line>
    <line>2> application:info().</line>
    </pre>
    
    <p>and the application is loaded
    
            <pre class='code with-wrapping fullwidth'>
    <line>2> application:which_applications().</line>
    <line>[{erlsrv,[],[]},</line>
    <line> {stdlib,"ERTS  CXC 138 10","3.0"},</line>
    <line> {kernel,"ERTS  CXC 138 10","5.0"}]</line>
    <line>3> </line>
    </pre>
    
    <p>and shows as running
    
    
            <pre class='code with-wrapping fullwidth'>
    <line>3> application:info().</line>
    <line>[{loaded,[{kernel,"ERTS  CXC 138 10","5.0"},</line>
    <line>          {stdlib,"ERTS  CXC 138 10","3.0"},</line>
    <line>          {erlsrv,[],[]}]},</line>
    <line> {loading,[]},</line>
    <line> {started,[{erlsrv,temporary},</line>
    <line>           {stdlib,permanent},</line>
    <line>           {kernel,permanent}]},</line>
    <line> {start_p_false,[]},</line>
    <line> {running,[{erlsrv,undefined},</line>
    <line>           {stdlib,undefined},</line>
    <line>           {kernel,<0.33.0>}]},</line>
    <line> {starting,[]}]</line>
    <line>4> </line>
    <line></line>
    </pre>
    
    <p>(There is supposed to be a process ID instead of the atom <code>undefined</code> on the line <code>{running,[{erlsrv,undefined}</code>.)
    
    <p>Hitting the server with curl produces Connection refused:
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ curl -v http://127.0.0.1:3000/hello/world</line>
    <line>*   Trying 127.0.0.1&hellip;</line>
    <line>* connect to 127.0.0.1 port 3000 failed: Connection refused</line>
    <line>* Failed to connect to 127.0.0.1 port 3000: Connection refused</line>
    <line>* Closing connection 0</line>
    <line>curl: (7) Failed to connect to 127.0.0.1 port 3000: Connection refused</line>
    <line>$ </line>
    </pre>
    
    <p>What&rsquo;s happening is that the the <code>mod</code> argument tells the application behavior what module holds the <code>start/2</code> method to call.  If we don&rsquo;t provide that module name, the behavior does not call any start method and the server is not started.
    
    <h3>Why Elli?</h3>
    <p>Tried mochiweb, but I was too new to Erlang.
    <p>Tried yaws and while creating an app was easy, but I got confused by yapp and embedded options.
    <p>Tried cowboy (or maybe it was Elixer?), but the tutorial didn&rsquo;t work for me (and I gave up quickly).
    <p>By the time I found Elli, I was more familiar with Erlang.  Also, the github readme had exactly the code I needed.</li>
    <p>Also, it&rsquo;s lightweight:
    
            <pre class='code with-wrapping fullwidth'>
    <line>$ cd $HOME/src/elli</line>
    <line>$ du -sh src</line>
    <line> 92K	src</line>
    <line>$ </line>
    </pre>
    
    
    
    <h3>Next steps &hellip;</h3>
    
    <p>This server is lacking pretty basic functionality.  Like logging.  Or including a Date HTTP header in the response.
    
    <p>Some future steps, in no particular order:
    
    <ul>
    <li>hot code reload</li>
    <li>build a release</li>
    <li>wrap into command-line with escript or sh</li>
    <li>add logging and basic auth</li>
    </ul>
    
</article>
